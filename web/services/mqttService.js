const mqtt = require('mqtt');
const SensorModel = require('../models/SensorModel');
const ActionModel = require('../models/ActionModel');

class MqttService {
    // Kh·ªüi t·∫°o d·ªãch v·ª• MQTT v·ªõi c·∫•u h√¨nh topics v√† tr·∫°ng th√°i thi·∫øt b·ªã
    constructor(socketService) {
        this.client = null;
        this.socketService = socketService;
        this.topics = {
            sensorData: 'iot/sensors/data',
            deviceStatus: {
                light: 'iot/led/light/status',
                fan: 'iot/led/fan/status', 
                ac: 'iot/led/ac/status'
            },
            deviceControl: {
                light: 'iot/led/light/command',
                fan: 'iot/led/fan/command',
                ac: 'iot/led/ac/command'
            }
        };
        this.deviceStates = {
            light: false,
            fan: false,
            ac: false
        };
    }

    // K·∫øt n·ªëi t·ªõi MQTT broker v√† thi·∫øt l·∫≠p event handlers
    async connect() {
        try {
            const brokerUrl = process.env.MQTT_BROKER || 'mqtt://localhost:1883';
            const clientId = process.env.MQTT_CLIENT_ID || 'iot_web_client';
            
            const connectionOptions = {
                clientId: clientId + '_' + Math.random().toString(16).substr(2, 8),
                clean: true,
                connectTimeout: 4000,
                reconnectPeriod: 1000,
            };

            // Th√™m username/password 
            if (process.env.MQTT_USERNAME) {
                connectionOptions.username = process.env.MQTT_USERNAME;
            }
            if (process.env.MQTT_PASSWORD) {
                connectionOptions.password = process.env.MQTT_PASSWORD;
            }
            
            this.client = mqtt.connect(brokerUrl, connectionOptions);

            this.client.on('connect', () => {
                console.log('‚úÖ MQTT connected to broker');
                this.subscribeToTopics();
            });

            this.client.on('message', (topic, message) => {
                this.handleMessage(topic, message);
            });

            this.client.on('error', (error) => {
                console.error('‚ùå MQTT connection error:', error.message);
            });

            this.client.on('offline', () => {
                console.log('‚ö†Ô∏è  MQTT client is offline');
            });

            this.client.on('reconnect', () => {
                console.log('üîÑ MQTT reconnecting...');
            });

        } catch (error) {
            console.error('‚ùå MQTT connection failed:', error.message);
        }
    }

    // ƒêƒÉng k√Ω theo d√µi t·∫•t c·∫£ c√°c topics c·∫ßn thi·∫øt
    subscribeToTopics() {
        const allTopics = [
            this.topics.sensorData,
            ...Object.values(this.topics.deviceStatus)
        ];

        allTopics.forEach(topic => {
            this.client.subscribe(topic, (err) => {
                if (err) {
                    console.error(`‚ùå Failed to subscribe to ${topic}:`, err.message);
                } else {
                    console.log(`‚úÖ Subscribed to ${topic}`);
                }
            });
        });
    }

    // X·ª≠ l√Ω tin nh·∫Øn MQTT nh·∫≠n ƒë∆∞·ª£c t·ª´ c√°c topics
    async handleMessage(topic, message) {
        try {
            const messageStr = message.toString();
            
            if (topic === this.topics.sensorData) {
                const data = JSON.parse(messageStr);
                await this.handleSensorData(data);
            } else if (Object.values(this.topics.deviceStatus).includes(topic)) {
                // Tr·∫°ng th√°i thi·∫øt b·ªã c√≥ th·ªÉ l√† vƒÉn b·∫£n th∆∞·ªùng ("on"/"off") ho·∫∑c JSON
                let data;
                try {
                    data = JSON.parse(messageStr);
                } catch (e) {
                    // N·∫øu kh√¥ng ph·∫£i JSON, x·ª≠ l√Ω nh∆∞ vƒÉn b·∫£n tr·∫°ng th√°i th∆∞·ªùng
                    data = { status: messageStr };
                }
                await this.handleDeviceStatus(topic, data);
            }
        } catch (error) {
            console.error('‚ùå Error handling MQTT message:', error.message);
        }
    }

    // X·ª≠ l√Ω d·ªØ li·ªáu c·∫£m bi·∫øn: l∆∞u DB v√† ph√°t t·ªõi clients
    async handleSensorData(data) {
        try {
            // X√°c th·ª±c d·ªØ li·ªáu c·∫£m bi·∫øn - ki·ªÉm tra undefined/null, kh√¥ng lo·∫°i tr·ª´ gi√° tr·ªã 0
            if (data.temperature === undefined || data.temperature === null ||
                data.humidity === undefined || data.humidity === null ||
                data.light === undefined || data.light === null) {
                console.error('‚ùå Invalid sensor data received:', data);
                return;
            }

            // L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
            await SensorModel.create({
                temperature: parseFloat(data.temperature),
                humidity: parseFloat(data.humidity),
                light: parseInt(data.light)
            });

            // Ph√°t s√≥ng ƒë·∫øn c√°c client ƒë√£ k·∫øt n·ªëi
            this.socketService.broadcastSensorData({
                temperature: data.temperature,
                humidity: data.humidity,
                light: data.light,
                timestamp: new Date().toISOString()
            });
            
        } catch (error) {
            console.error('‚ùå Error handling sensor data:', error.message);
        }
    }

    // X·ª≠ l√Ω tr·∫°ng th√°i thi·∫øt b·ªã: c·∫≠p nh·∫≠t DB v√† ph√°t t·ªõi clients
    async handleDeviceStatus(topic, data) {
        try {
            let device = '';
            
            // X√°c ƒë·ªãnh lo·∫°i thi·∫øt b·ªã t·ª´ topic
            if (topic.includes('light')) device = 'Light';
            else if (topic.includes('fan')) device = 'Fan';
            else if (topic.includes('ac')) device = 'Air condition';

            if (device && data.status) {
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã
                let deviceKey = device.toLowerCase().replace(' ', '');
                if (deviceKey === 'aircondition') deviceKey = 'ac';
                
                this.deviceStates[deviceKey] = data.status === 'on';

                // L∆∞u h√†nh ƒë·ªông v√†o c∆° s·ªü d·ªØ li·ªáu
                await ActionModel.create({
                    device: device,
                    action: data.status
                });

                // Ph√°t s√≥ng ƒë·∫øn c√°c client ƒë√£ k·∫øt n·ªëi
                this.socketService.broadcastDeviceStatus({
                    device: device,
                    status: data.status,
                    timestamp: new Date().toISOString()
                });

            }
        } catch (error) {
            console.error('‚ùå Error handling device status:', error.message);
        }
    }

    // G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã qua MQTT
    async controlDevice(device, action) {
        try {
            const deviceMap = {
                'light': this.topics.deviceControl.light,
                'fan': this.topics.deviceControl.fan,
                'ac': this.topics.deviceControl.ac
            };

            const topic = deviceMap[device.toLowerCase()];
            if (!topic) {
                throw new Error(`Unknown device: ${device}`);
            }

            // ESP32 mong ƒë·ª£i tin nh·∫Øn vƒÉn b·∫£n th∆∞·ªùng "on" ho·∫∑c "off"
            this.client.publish(topic, action);

            console.log(`üì§ Control command sent - Device: ${device}, Action: ${action}, Topic: ${topic}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå Error controlling device:', error.message);
            return false;
        }
    }

    // L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ thi·∫øt b·ªã
    getCurrentDeviceStates() {
        return this.deviceStates;
    }

    // Ng·∫Øt k·∫øt n·ªëi MQTT broker
    async disconnect() {
        if (this.client) {
            await this.client.endAsync();
            console.log('‚úÖ MQTT disconnected');
        }
    }
}

module.exports = MqttService;